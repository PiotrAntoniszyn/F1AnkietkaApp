import streamlit as st
import pandas as pd
import smtplib
import csv
import io
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from datetime import datetime
import os
import json
from PIL import Image

# Konfiguracja strony
st.set_page_config(page_title="F1 Ankietka", page_icon="üèéÔ∏è", layout="wide")

# Funkcja do ≈Çadowania niestandardowego opisu
def load_app_description():
    try:
        # Pr√≥ba za≈Çadowania opisu z secrets
        if "app_description" in st.secrets:
            return st.secrets["app_description"]
        
        # Alternatywnie, sprawdzenie czy istnieje plik app_settings.json
        if os.path.exists("app_settings.json"):
            with open("app_settings.json", "r", encoding="utf-8") as file:
                settings = json.load(file)
                return settings.get("app_description", "### Typuj wyniki wy≈õcig√≥w Formu≈Çy 1 i zdobywaj punkty!")
    except Exception as e:
        st.warning(f"Nie uda≈Ço siƒô za≈Çadowaƒá niestandardowego opisu: {e}")
    
    # Domy≈õlny opis, je≈õli nie mo≈ºna za≈Çadowaƒá
    return "### Typuj wyniki wy≈õcig√≥w Formu≈Çy 1 i zdobywaj punkty!"

# Tytu≈Ç i opis
st.title("üèÅ F1 Ankietka üèéÔ∏è")
app_description = load_app_description()
st.markdown(app_description)

# Funkcja ≈ÇadujƒÖca pytania
def load_questions():
    try:
        # Pr√≥ba za≈Çadowania pyta≈Ñ z secrets
        if "custom_questions" in st.secrets:
            return st.secrets["custom_questions"]
        
        # Alternatywnie, sprawdzenie czy istnieje plik questions.json
        if os.path.exists("questions.json"):
            with open("questions.json", "r", encoding="utf-8") as file:
                return json.load(file)
    except Exception as e:
        st.warning(f"Nie uda≈Ço siƒô za≈Çadowaƒá niestandardowych pyta≈Ñ: {e}")
    
    # Domy≈õlne pytania, je≈õli nie mo≈ºna za≈Çadowaƒá
    return [
        {
            "question": "Czy bƒôdzie najszybsze okrƒÖ≈ºenie z punktem bonusowym dla kierowcy w TOP10?",
            "options": ["Tak", "Nie"]
        },
        {
            "question": "Kt√≥ry zesp√≥≈Ç zdobƒôdzie wiƒôcej punkt√≥w?",
            "options": ["Red Bull", "Ferrari", "Mercedes", "McLaren", "Inny"]
        }
    ]

# Funkcja do generowania pliku CSV z odpowiedziami
def generate_csv(predictions, user_name):
    # Utw√≥rz bufor pamiƒôci dla pliku CSV
    csv_buffer = io.StringIO()
    csv_writer = csv.writer(csv_buffer)
    
    # Nag≈Ç√≥wki
    csv_writer.writerow(['Kategoria', 'Odpowied≈∫'])
    
    # Dodaj imiƒô u≈ºytkownika
    csv_writer.writerow(['Imiƒô', user_name])
    
    # Dodaj datƒô i czas
    csv_writer.writerow(['Data wys≈Çania', datetime.now().strftime('%Y-%m-%d %H:%M:%S')])
    
    # Dodaj pusty wiersz
    csv_writer.writerow([])
    
    # Dodaj wszystkie przewidywania
    for key, value in predictions.items():
        csv_writer.writerow([key, value])
    
    # Zwr√≥ƒá zawarto≈õƒá bufora jako string
    return csv_buffer.getvalue()

# Funkcja wysy≈ÇajƒÖca email
def send_email(predictions, user_name):
    try:
        # Konfiguracja emaila - te dane nale≈ºy zastƒÖpiƒá w≈Çasnymi
        email_sender = st.secrets.email.sender
        email_password = st.secrets.email.password
        admin_email = st.secrets.email.sender
        
        # Przygotowanie wiadomo≈õci
        subject = f"[F1 Quiz App] Nowe typy F1 od {user_name}"
        
        # Formatowanie przewidywa≈Ñ do emaila
        email_body = f"""
        Nowe typy F1 od {user_name} 
        Data wys≈Çania: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        
        Przewidywania:
        """
        
        for key, value in predictions.items():
            email_body += f"\n{key}: {value}"
        
        # Konfiguracja wiadomo≈õci
        msg = MIMEMultipart()
        msg['From'] = email_sender
        msg['To'] = email_sender
        msg['Subject'] = subject
        
        # Dodaj tekst wiadomo≈õci
        msg.attach(MIMEText(email_body, 'plain'))
        
        # Generuj i za≈ÇƒÖcz plik CSV
        csv_content = generate_csv(predictions, user_name)
        csv_attachment = MIMEApplication(csv_content.encode('utf-8'))
        csv_attachment.add_header('Content-Disposition', 'attachment', 
                                  filename=f'f1_typy_{user_name}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
        msg.attach(csv_attachment)
        
        # Wys≈Çanie emaila
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(email_sender, email_password)
        server.send_message(msg)
        server.quit()
        
        return True
    except Exception as e:
        st.error(f"B≈ÇƒÖd podczas wysy≈Çania emaila: {e}")
        return False

# Funkcja do generowania listy kierowc√≥w F1
def get_f1_drivers():
    # Aktualna lista kierowc√≥w F1 2025 zgodnie z dostarczonym obrazem
    teams_drivers = {
        'Red Bull Racing': ['Max Verstappen', 'Liam Lawson'],
        'Ferrari': ['Charles Leclerc', 'Lewis Hamilton'],
        'Mercedes': ['Andrea Kimi Antonelli', 'George Russell'],
        'McLaren': ['Lando Norris', 'Oscar Piastri'],
        'Aston Martin': ['Fernando Alonso', 'Lance Stroll'],
        'Alpine': ['Jack Doohan', 'Pierre Gasly'],
        'Williams': ['Alexander Albon', 'Carlos Sainz Jr.'],
        'Racing Bulls': ['Isack Hadjar', 'Yuki Tsunoda'],
        'Kick Sauber': ['Gabriel Bortoleto', 'Nico H√ºlkenberg'],
        'Haas': ['Esteban Ocon', 'Oliver Bearman']
    }
    
    drivers = []
    for team, team_drivers in teams_drivers.items():
        for driver in team_drivers:
            drivers.append(driver)
    
    return drivers

# ≈Åadujemy dodatkowe pytania
custom_questions = load_questions()

# Inicjalizacja stanu sesji dla logowania administratora
if 'show_admin' not in st.session_state:
    st.session_state.show_admin = False

# Inicjalizacja stanu sesji dla pokazywania formularza logowania administratora
if 'show_admin_login' not in st.session_state:
    st.session_state.show_admin_login = False

# Funkcja do pokazywania/ukrywania formularza logowania
def toggle_admin_login():
    st.session_state.show_admin_login = not st.session_state.show_admin_login

# Funkcja do wylogowania z panelu admina
def logout_admin():
    st.session_state.show_admin = False
    st.session_state.show_admin_login = False
    st.rerun()

# Formularz g≈Ç√≥wny
with st.form("f1_prediction_form"):
    # Dane osobowe
    st.subheader("Twoje dane")
    col1, col2 = st.columns(2)
    with col1:
        user_name = st.text_input("Imiƒô")
   
    
    st.markdown("---")
    
    # Lista kierowc√≥w
    drivers = get_f1_drivers()
    
    # Sekcja 1: Podium wy≈õcigu
    st.subheader("1. Podium wy≈õcigu (1 punkt za ka≈ºdego kierowcƒô, +1 za ca≈Çe podium)")
    col1, col2, col3 = st.columns(3)
    with col1:
        podium_1 = st.selectbox("Pierwsze miejsce", drivers)
    with col2:
        # Filtrujemy listƒô, aby usunƒÖƒá ju≈º wybranego kierowcƒô
        podium_2_options = [d for d in drivers if d != podium_1]
        podium_2 = st.selectbox("Drugie miejsce", podium_2_options)
    with col3:
        # Filtrujemy listƒô, aby usunƒÖƒá ju≈º wybranych kierowc√≥w
        podium_3_options = [d for d in drivers if d not in [podium_1, podium_2]]
        podium_3 = st.selectbox("Trzecie miejsce", podium_3_options)
    
    # Sekcja 2: R√≥≈ºnica czasowa
    st.subheader("2. R√≥≈ºnica w sekundach miƒôdzy 1. a 2. miejscem (1 punkt)")
    time_diff = st.radio(
        "Wybierz przedzia≈Ç",
        ["Mniej ni≈º 2 sekundy", "2.001-5 sekund", "5.001-10 sekund", 
         "10.001-20 sekund", "Wiƒôcej ni≈º 20 sekund"]
    )
    
    # Sekcja 3: Driver of The Day
    st.subheader("3. Kierowca dnia (1 punkt)")
    dotd = st.selectbox("Driver of The Day", drivers)
    
    # Sekcja 4: Safety Car
    st.subheader("4. Safety Car (1 punkt)")
    safety_car = st.radio(
        "Czy podczas wy≈õcigu wyjedzie Safety Car?",
        ["Tak", "Nie"]
    )
    
    # Sekcja 5: Czerwona flaga
    st.subheader("5. Czerwona flaga (1 punkt)")
    red_flag = st.radio(
        "Czy podczas wy≈õcigu bƒôdzie czerwona flaga?",
        ["Tak", "Nie"]
    )
    
    # Sekcja 6: Liczba sklasyfikowanych kierowc√≥w
    st.subheader("6. Ilu kierowc√≥w zostanie sklasyfikowanych? (1 punkt)")
    classified_drivers = st.radio(
        "Wybierz przedzia≈Ç",
        ["20", "19-18", "17-16", "15-14", "Mniej ni≈º 14"]
    )
    
    # Sekcja 7: Liczba zespo≈Ç√≥w z punktami
    st.subheader("7. Ile zespo≈Ç√≥w zdobƒôdzie punkty? (1 punkt)")
    teams_with_points = st.select_slider(
        "Wybierz liczbƒô zespo≈Ç√≥w",
        options=[5, 6, 7, 8, 9, 10]
    )
    
    # Sekcja 8: Dodatkowe pytania (zmienne)
    st.subheader("8. Dodatkowe pytania (1 punkt za ka≈ºde)")
    
    # Dynamiczne dodatkowe pytania
    extra_answers = {}
    for i, question_data in enumerate(custom_questions):
        question_key = f"Pytanie dodatkowe {i+1}"
        extra_answers[question_key] = st.radio(
            question_data["question"],
            options=question_data["options"]
        )
    
    # Przycisk wys≈Çania formularza
    submitted = st.form_submit_button("Wy≈õlij typy")
    
    if submitted:
        if not user_name:
            st.error("Wype≈Çnij imiƒô!")
        else:
            # Zbieramy wszystkie przewidywania
            predictions = {
                "Podium 1. miejsce": podium_1,
                "Podium 2. miejsce": podium_2,
                "Podium 3. miejsce": podium_3,
                "R√≥≈ºnica czasowa": time_diff,
                "Kierowca dnia": dotd,
                "Safety Car": safety_car,
                "Czerwona flaga": red_flag,
                "Liczba sklasyfikowanych kierowc√≥w": classified_drivers,
                "Liczba zespo≈Ç√≥w z punktami": teams_with_points,
            }
            
            # Dodajemy odpowiedzi na pytania dodatkowe
            predictions.update(extra_answers)
            
            # Wysy≈Çamy email
            if send_email(predictions, user_name):
                st.success("Twoje typy zosta≈Çy wys≈Çane! Powodzenia! üèÜ")
                
                # Pokazujemy podsumowanie
                st.subheader("Podsumowanie Twoich typ√≥w:")
                
                # Tworzymy tabelƒô z przewidywaniami
                df = pd.DataFrame(list(predictions.items()), columns=["Kategoria", "Tw√≥j typ"])
                st.table(df)
                img = Image.open("fernando.png")
                st.image(img, caption="Twoje zdjƒôcie", use_container_width=True)
            else:
                st.error("WystƒÖpi≈Ç problem podczas wysy≈Çania formularza. Spr√≥buj ponownie.")

# Dodanie instrukcji punktacji
with st.expander("Zasady punktacji"):
    st.markdown("""
    ### Zasady przyznawania punkt√≥w:
    1. **Podium** - 1 punkt za ka≈ºdego prawid≈Çowo wytypowanego kierowcƒô + 1 dodatkowy punkt za idealne podium (≈ÇƒÖcznie max. 4 punkty)
    2. **R√≥≈ºnica czasowa** - 1 punkt za prawid≈Çowy przedzia≈Ç
    3. **Kierowca dnia** - 1 punkt za trafienie
    4. **Safety Car** - 1 punkt za prawid≈ÇowƒÖ odpowied≈∫
    5. **Czerwona flaga** - 1 punkt za prawid≈ÇowƒÖ odpowied≈∫
    6. **Liczba sklasyfikowanych kierowc√≥w** - 1 punkt za prawid≈Çowy przedzia≈Ç
    7. **Liczba zespo≈Ç√≥w z punktami** - 1 punkt za trafienie
    8. **Pytania dodatkowe** - po 1 punkcie za ka≈ºdƒÖ prawid≈ÇowƒÖ odpowied≈∫
    
    **Maksymalna liczba punkt√≥w do zdobycia: 11**
    """)

# Zmienne do przechowywania ustawie≈Ñ aplikacji
if 'app_settings' not in st.session_state:
    st.session_state.app_settings = {
        "app_description": "### Typuj wyniki wy≈õcig√≥w Formu≈Çy 1 i zdobywaj punkty!"
    }

# Funkcja do zapisywania ustawie≈Ñ aplikacji
def save_app_settings():
    try:
        # W praktycznej implementacji tutaj zapisujemy do pliku lub bazy danych
        with open("app_settings.json", "w", encoding="utf-8") as file:
            json.dump(st.session_state.app_settings, file, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        st.sidebar.error(f"B≈ÇƒÖd podczas zapisywania ustawie≈Ñ: {e}")
        return False

# Ukryty przycisk do pokazania formularza logowania
# Umieszczamy go w stopce, gdzie jest mniej zauwa≈ºalny
st.markdown("---")
cols = st.columns([10, 1])
with cols[1]:
    if st.button("üë§", help="Panel administratora", key="admin_button"):
        toggle_admin_login()

st.markdown("üèéÔ∏è F1 Ankietka by Piotr Antoniszyn ¬© 2025")

# Panel logowania administratora - pokazywany tylko po klikniƒôciu ukrytego przycisku
if st.session_state.show_admin_login and not st.session_state.show_admin:
    with st.sidebar:
        st.sidebar.header("Panel administratora")
        admin_password = st.text_input("Has≈Ço administratora", type="password")
        
        col1, col2, col3 = st.columns([2, 2, 1])
        with col1:
            if st.button("Anuluj"):
                st.session_state.show_admin_login = False
                st.rerun()
        with col2:
            if st.button("Zaloguj"):
                # Sprawd≈∫ has≈Ço z secrets
                try:
                    if admin_password == st.secrets.admin.password:
                        st.session_state.show_admin = True
                        #st.rerun()
                    else:
                        st.error("Nieprawid≈Çowe has≈Ço!")
                except:
                    # Awaryjne has≈Ço je≈õli secrets nie jest skonfigurowane
                    if admin_password == "admin123":
                        st.session_state.show_admin = True
                        #st.rerun()
                    else:
                        st.error("Nieprawid≈Çowe has≈Ço!")

# Panel administratora (gdy zalogowany)
if st.session_state.show_admin:
    with st.sidebar:
        st.header("Panel Administratora")
        
        # Przycisk wylogowania na g√≥rze panelu
        col1, col2 = st.columns([4, 1])
        with col2:
            if st.button("Wyloguj", key="logout_button"):
                logout_admin()
        
        # Sekcja z podstawowymi ustawieniami aplikacji
        st.subheader("Og√≥lne ustawienia aplikacji")
        
        # Edycja opisu aplikacji
        app_description = st.text_area(
            "Opis aplikacji (tekst pod tytu≈Çem)",
            value=app_description.replace("### ", ""),
            help="Zmie≈Ñ g≈Ç√≥wny opis aplikacji wy≈õwietlany pod tytu≈Çem. Domy≈õlnie: 'Typuj wyniki wy≈õcig√≥w Formu≈Çy 1 i zdobywaj punkty!'"
        )
        
        # Aktualizacja opisu aplikacji w sesji
        st.session_state.app_settings["app_description"] = f"### {app_description}"
        
        # Przycisk do zapisywania ustawie≈Ñ og√≥lnych
        if st.button("Zapisz ustawienia og√≥lne"):
            if save_app_settings():
                st.success("Ustawienia zosta≈Çy zapisane!")
                st.rerun()  # Od≈õwie≈ºenie aplikacji, aby pokazaƒá zmiany
        
        st.markdown("---")
        
        st.subheader("ZarzƒÖdzanie pytaniami dodatkowymi")
        
        # Edycja istniejƒÖcych pyta≈Ñ
        for i, question in enumerate(custom_questions):
            st.subheader(f"Pytanie {i+1}")
            question_text = st.text_area(f"Tre≈õƒá pytania {i+1}", value=question["question"])
            options_text = st.text_area(f"Opcje (ka≈ºda w nowej linii) {i+1}", 
                                     value="\n".join(question["options"]))
            
            # Aktualizuj pytanie
            custom_questions[i]["question"] = question_text
            custom_questions[i]["options"] = [opt.strip() for opt in options_text.split("\n") if opt.strip()]
        
        # Zapisz zmiany
        if st.button("Zapisz pytania"):
            try:
                # W praktyce tutaj dodaj kod do zapisania pyta≈Ñ
                # np. do pliku lub bazy danych
                with open("questions.json", "w", encoding="utf-8") as file:
                    json.dump(custom_questions, file, ensure_ascii=False, indent=2)
                st.success("Pytania zosta≈Çy zaktualizowane!")
                st.rerun()  # Od≈õwie≈ºenie aplikacji, aby pokazaƒá zmiany
            except Exception as e:
                st.error(f"B≈ÇƒÖd podczas zapisywania pyta≈Ñ: {e}")
        
        # Przycisk do eksportu pliku JSON z pytaniami
        if st.button("Eksportuj pytania (JSON)"):
            json_str = json.dumps(custom_questions, ensure_ascii=False, indent=2)
            st.download_button(
                label="Pobierz plik JSON z pytaniami",
                data=json_str,
                file_name="questions.json",
                mime="application/json"
            )